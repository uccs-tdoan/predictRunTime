mean3[i] <- mean(df[,3],na.rm=TRUE)
sdt3[i] <- sd(df[,3],na.rm=TRUE)
#m_coeffVar3[i] <- sd(df[,3],na.rm=TRUE)/mean(df[,3],na.rm=TRUE)
#m_indexDisper3[i] <- var(df[,3],na.rm=TRUE)/mean(df[,3],na.rm=TRUE)
skewness3[i] <- skewness(df[,3],na.rm=TRUE)
mad3[i] <- mad(df[,3])   # median absolute deviation
median4[i] <- median(df[,4],na.rm=TRUE)
mean4[i] <- mean(df[,4],na.rm=TRUE)
sdt4[i] <- sd(df[,4],na.rm=TRUE)
#m_coeffVar4[i] <- sd(df[,4],na.rm=TRUE)/mean(df[,4],na.rm=TRUE)
#m_indexDisper4[i] <- var(df[,4],na.rm=TRUE)/mean(df[,4],na.rm=TRUE)
skewness4[i] <- skewness(df[,4],na.rm=TRUE)
mad4[i] <- mad(df[,4])   # median absolute deviation
entro_Class[i] <- entropy(df[ncol(df)],method="sg") # compute entropy for targetmu
# compute multiinformation (total correlation) for all attributes
totalCorr[i] <- multiinformation(discretize(df[,-ncol(df)]),method="sg")
}
dat<-data.frame(dataset,ClassInst,AttrClass,median1,mean1,sdt1,skewness1,mad1,median2,mean2,sdt2,skewness2,mad2,median3,mean3,sdt3,skewness3,mad3,median4,mean4,sdt4,skewness4,mad4,entro_Class,totalCorr)
write.table(dat,file="../TestStats.csv",sep=",",row.names=FALSE,col.names=TRUE)
}
setwd("C:/samllProject/predictRunTime/Data/run1")
files <- list.files(getwd())
n <- length(files)
files
#createMeta(files)
files
library(zoo)
library(forecast)
install.packages("urca")
fix(Boston )
library(MASS)
fix(Boston)
library(ISLR)
fix(Boston)
lm.fit =lm(medv∼lstat ,data=Boston )
attach (Boston )
attach(Boston)
lm.fit =lm(medv∼lstat ,data=Boston )
fix( Carseats )
lm.fit =lm(Sales∼.+ Income :Advertising +Price :Age ,data=Carseats )
library(class)
library("AppliedPredictiveModeling")
library("caret")
library("elasticnet")
install.packages("elasticnet")
library(pls)
library("RColorBrewer")
library(caret)
data(tecator)
pcaObj <- prcomp(absorp, center = TRUE, scale = TRUE)
pctVar <- pcaObj$sdev^2/sum(pcaObj$sdev^2)*100
head(pctVar)
pcaObj
str(pcaObj)
et.seed(1029)
set.seed(1029)
inMeatTraining <- createDataPartition(endpoints[, 3], p = 3/4, list= FALSE)
inMeatTraining
str(inMeatTraining)
dim(inMeatTraining)
absorpTrain <- absorp[ inMeatTraining,]
absorpTest <- absorp[-inMeatTraining,]
absorpTrain
dim(absorpTrain)
head(absorpTrain)
str(absorpTrain)
proteinTrain <- endpoints[ inMeatTraining, 3]
proteinTest <- endpoints[-inMeatTraining,3]
proteinTrain
proteinTest
ctrl <- trainControl(method = "repeatedcv", repeats = 5)
ctrl
set.seed(529)
meatPCR <- train(x = absorpTrain, y = proteinTrain,
+ method = "pcr",
+ trControl = ctrl, tuneLength = 25)
meatPCR <- train(x = absorpTrain, y = proteinTrain, method = "pcr",trControl = ctrl, tuneLength = 25)
meatPCR
meatPLS <- train(x = absorpTrain, y = proteinTrain, method = "pls", trControl = ctrl, preProcess = c("center", "scale"),tuneLength = 25)
meatPLS[10]
head(meatPLS)
comps <- rbind(meatPLS$results, meatPCR$results)
comps$Model <- rep(c("PLS", "PCR"), each = 25)
library(caret)
dat <- iris
dat
str(dat)
pp <- preProcess(dat[,-5], method="pca")
dat[,-5] <- predict(pp, dat[,-5])
head(dat)
knnFit1 <- train(Species~., dat, method = "knn", preProcess=c("pca"), trControl = trainControl(method = "cv"))
knnFit1
dat <- iris
knnFit2 <- train(Species~., dat, method = "knn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
head(iris)
predict(dat[,1:4], dat[,-5])
library(caret)
?predict()
ex <- type ~ .-Species
lm.fit <- preditc.glm(ex,data=dat)
lm.fit <- predict.glm(ex,data=dat)
lm.fit
ex = Species ~ .
lm.fit <- preditc.glm(ex,data=dat)
lm.fit <- predict.glm(ex,data=dat)
lm.fit
summary(lm.fit)
lm.fit <- predict.lm(ex,data=dat)
lm.fit = lm(ex,data=dat)
head(dat)
ex =  species ~ .-Species
lm.fit <- lm(ex,data=dat)
ex =  Species ~ .
lm.fit <- lm(ex,data=dat)
ex =  Species ~.
lm.fit <- lm(ex,data=dat)
rm(knnFit1)
rm(knnFit2)
rm(lm.fit)
rm(lmeatPCR)
rm(meatPCR)
rm(pcaObj)
rm(pp)
rm(proteinTest)
rm(proteinTrain)
rm(ctrl)
rm(inMeatTraining)
rm(meatPLS)
rm(pctVar)
rm(ex)
rm(endpoints)
rm(absorp)
rm(absorpTest)
rm(absorpTrain)
head(dat)
library(MASS)
fix(Boxton)
names(Boston)
head(Boston)
dim(Boston)
head(Boston)
knnFit2 <- train(medv~., Boston, method = "knn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
tmp <- predict(knnFit2,Boston[,-14])
head(tmp)
head(Boston)
pred <- predict(knnFit2,Boston[,-14])
Boston[14]
actual <- Boston[14]
sqrt( sum( (pred - actual)^2 ) / 506 )
preProcess=c("pca")
? train()
?preprocess()
?preProcess()
dat <- Boston
pp <- preProcess(dat[,-14], method="pca")
dat[,-14] <- predict(pp, dat[,-14])
knnFit1 <- train(medv~., dat, method = "knn", trControl = trainControl(method = "cv"))
pred <- predict(knnFit1,dat[,-14])
head(pred)
sqrt( sum( (pred - actual)^2 ) / 506 )
str(Boston)
quit()
library(stat)
library(stats)
library(pROC)
library(leap)
library(leaps)
library(klaR)
install.packages("klaR")
library(elasticnet)
library(pls)
library(AppliedPredictiveModeling)
data(solubility)
trainingData <- solTrainXtrans
trainingDat
trainingData
head(trainingData)
trainingData$Solubility <- solTrainY
library(nnet)
library(earth)
library(neural)
install.packages(neural)
install.packages("neural")
install.packages("RSNNS")
library(kernlab)
install.packages("caret")
install.packages("ggplot2")
library(caret)
library(e1071)
library(ggplot2)
install.packages("Rcpp")
library(ggplot2)
quit()
library(caret)
quit(0)
library(caret)
install.packages("ggplot2")
library(ggplot2)
quit()
library(mda)
install.packages("mda")
library(lars)
library(glmnet)
install.packages("rgl")
install.packages("relaimpo")
install.packages("neuralnet")
install.packages("clue")
library(forecast)
install.packages("FactoMineR")
install.packages("MCMCpack")
library(kknn)
install.packages("kknn")
library(MCMCpack)
install.packages("mgcv")
install.packages("scatterplot3d")
set.seed(459)
Bluegill.length <- sample(seq(15, 22.5, by=0.5), 50, replace=T)
Bluegill.weight <- sample(seq(0.2, 0.8, by=0.05), 50, replace=T)
Bowfin.length <- sample(seq(46, 61, by=0.5), 50, replace=T)
Bowfin.length <- sample(seq(46, 61, by=0.5), 50, replace=T)
Bowfin.weight <- sample(seq(1.36, 3.2, by=0.5), 50, replace=T)
Carp.length <- sample(seq(30, 75, by=1), 50, replace=T)
Carp.weight <- sample(seq(0.2, 3.5, by=0.1), 50, replace=T)
Goldeye.length <- sample(seq(25, 38, by=0.5), 50, replace=T)
Goldeye.weight <- sample(seq(0.4, 0.54, by=0.01), 50, replace=T)
Largemouth_Bass.length <- sample(seq(22, 55, by=0.5), 50, replace=T)
Largemouth_Bass.weight <- sample(seq(0.68, 1.8, by=0.01), 50,
replace=T)
weight <-c(Bluegill.weight, Bowfin.weight, Carp.weight, Goldeye.
weight, Largemouth_Bass.weight)
weight <-c(Bluegill.weight, Bowfin.weight, Carp.weight, Goldeye.weight, Largemouth_Bass.weight)
length <-c(Bluegill.length, Bowfin.length, Carp.length, Goldeye.length, Largemouth_Bass.length)
speed <- rnorm(50*5, 7.2, sd=1.8)
fish <- c(rep("Bluegill", 50), rep("Bowfin", 50), rep("Carp", 50),
rep("Goldeye", 50), rep("Largemouth_Bass", 50))
fish.data <- data.frame(length, weight, speed, fish)
str(fish.data)
plot3DfishData <- function(x, y, z, data=fish.data){
require("scatterplot3d")
fish.variable <- colnames(data)
scatterplot3d(data[, x], data[, y], data[, z], mar = mar0, color = c("blue", "black", "red", "green", "turquoise")[data$fish], pch = 19, xlab=fish.variable[x], ylab=fish.variable[y], zlab=fish.variable[z])
}
library("scatterplot3d")
par(mfrow = c(1, 1))
plot3DfishData(1, 2, 3)
quit()
quit()
quit*()
quit()
library(devtools)
library(knitr)
install.packages("roxygen2","testthat")
install.pcakages("roxygen2")
install.packages("roxygen2")
install.packages("testthat")
install.packages("rstudioapi")
install.packages("rstudioapi")
library(roxygen2)
library(testthat)
quit()
install.packages("fpp",dependencies=TRUE)
library(fp)
library(fpp)
quit()
library(fpp)
plot(melsyd[,"Economy.Class"])
plot(a10)
lag.plot(beer,lags=9,do.lines=FALSE)
plot(BoxCox(elec,lambda=1/3))
fit <- snaive(elec, lambda=1/3)
plot(fit)
plot(fit, include=120)
library(ggplot2)
library(reshape2)
setwd("c:/smallProject/predictRuntime")
setwd("c:/smallProject/predictRuntime/code")
df <- read.csv("predictedTimeModels.csv")
dat <- melt(df,id.var="observed")
dat
setwd("c:/smallProject/predictRuntime/code")
df <- read.csv("predictedTimeModels.csv")
df <- read.csv("../predictedTimeModels.csv")
dat <- melt(df,id.var="observed")
dat
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(intercept = 0, slope = 1, colour = "red") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline( colour = "red") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
head(dat)
data(mtcars)
str(mtcars)
str(df)
library(gcookbook)
mg
mpg
head(mpg)
mpg2 <- mpg
levels(mpg2$drv)[levels(mpg2$drv)=="4"] <- "4wd"
mpg2
head(mpg2)
tail(mpg2)
levels(mpg2$drv)[levels(mpg2$drv)=="f"] <- "Front"
tail(mpg2)
str(mpg)
str(df)
str(dat)
levels(dat$variable)[levels(dat$variable)=="prePCR"] <- "Principle Component Regression"
levels(dat$variable)[levels(dat$variable)=="prePLS"] <- "Partial Least Square"
levels(dat$variable)[levels(dat$variable)=="Elastic"] <- "Elastic Net"
levels(dat$variable)[levels(dat$variable)=="predRidge"] <- "Ridge Regression"
levels(dat$variable)[levels(dat$variable)=="preMars"] <- "Ridge Regression"
levels(dat$variable)[levels(dat$variable)=="predMars"] <- "Multi Variate Regression Spline"
levels(dat$variable)[levels(dat$variable)=="predKNN"] <- "K-Nearest Neighbor Regression"
levels(dat$variable)[levels(dat$variable)=="predSVR"] <- "Support Vector Regression"
head(dat)
fix(dat)
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
levels(dat$variable)[levels(dat$variable)=="predPLS"] <- "Partial Least Square"
levels(dat$variable)[levels(dat$variable)=="predPCR"] <- "Principle Component Regression"
levels(dat$variable)[levels(dat$variable)=="predSVMR"] <- "Support Vector Regression"
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") + labs(x="Observed"")
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") + labs(y="Observed ")
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") + labs(x="Observed ")
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") + labs(x="Observed ") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models")
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") + labs(x="Observed ") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models") +
theme(plot.title = element_text(face="bold"))
pdf("../ModelsCompare.pdf", width=6, height=5)
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") +
geom_abline(colour = "red") + labs(x="Observed ") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models") +
theme(plot.title = element_text(face="bold"))
dev.off()
df <- read.csv("../FinalData.csv")
CPUTrans <- BoxCoxTrans(df$CPUtime)
CPUTrans
df$CPUtime <-  predict(CPUTrans,df$CPUtime)
library(caret)
library(e1071)
library(ggplot2)
df <- read.csv("../FinalData.csv")
trans <- preProcess(dfe, method = c("BoxCox"))
df <- predict(trans, df)
trans <- preProcess(df, method = c("BoxCox"))
df <- predict(trans, df)
df <- read.csv("../FinalData.csv")
CPUTrans <- BoxCoxTrans(df$CPUtime)
CPUTrans
df$CPUtime <-  predict(CPUTrans,df$CPUtime)
require(gam)
str(df)
df <- read.csv("../TrainPCA.csv")
df <- df[,-c(1,22,23,25,27)]
CPUTrans <- BoxCoxTrans(df$CPUtime)
CPUTrans
df$CPUtime <-  predict(CPUTrans,df$CPUtime)
str(df)
gam1 <- gam(CPUtime~s(instan,df=4)+s(classes,df=4)+ s(FSize,df=4)+Algorithm,data=df)
par(mfrow=c(2,2))
plot(game1,se=T)
plot(gam1,se=T)
head(df)
gam1 <- gam(CPUtime~s(instan,df=4)+s(classes,df=4)+ s(FSize,df=4)+Algorithm,data=df)
plot(gam1,se=T)
data(Wage)
library(MASS)
data(Wage)
require(ISLR)
attach(Wage)
str(Wage)
str(df)
plot(gam1,se=T)
gam1 <- gam(df$CPUtime~s(df$instan,df=4)+s(df$classes,df=4)+ s(df$FSize,df=4)+df$Algorithm)
plot(gam1,se=T)
df$instan
head(df)
dat <- df
gam1 <- gam(CPUtime~s(instan,df=4)+s(classes,df=4)+ s(FSize,df=4)+Algorithm,data=dat)
plot(gam1,se=T)
library(reshape2)
library(ggplot2)
setwd("c:/predictRuntime/compress_error")
df1 <- read.csv("../compress_error/ErrorFA.csv",stringsAsFactors=F, header=T)
df1$method <- "FA"
df2 <- read.csv("../compress_error/ErrorFICA.csv",stringsAsFactors=F, header=T)
df2$method <- "FICA"
df3 <- read.csv("../compress_error/ErrorKernelLinear.csv",stringsAsFactors=F, header=T)
df3$method <- "K.Linear"
df4 <- read.csv("../compress_error/ErrorKernelRBF.csv",stringsAsFactors=F, header=T)
df4$method <- "K. RBF"
df5 <- read.csv("../compress_error/ErrorPPCA.csv",stringsAsFactors=F, header=T)
df5$method <- "P. PCA"
df6 <- read.csv("../compress_error/ErrorRPCA.csv",stringsAsFactors=F, header=T)
df6$method <- "R. PCA"
df7 <- read.csv("../compress_error/ErrorTSVD.csv",stringsAsFactors=F, header=T)
df7$method <- "T. SVD"
df <- rbind(df1,df2,df3,df4,df5,df6,df7)
colnames(df)<- c("dataset","2Features","3Features","4Features","5Features","6Features" ,"7Features","method")
write.table(df,file="../Errors_Compare.csv",sep=",",row.names=FALSE,col.names=TRUE)
dat <- melt(df, id.var=c("dataset","method"))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()+axis.ticks = element_blank()) + xlab("Datasets") +ylab("Error rates") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("Error rates") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value),shape=dataset) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("Error rates") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value)) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("Error rates") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value)) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("Error rates generated dimension reduction methods ") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value)) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("% Error caused by dimention reduction methods ") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value)) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("% Error caused by dimention reduction methods ") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
dev.off()
getwd()
df1 <- read.csv("../compress_error/ErrorFA.csv",stringsAsFactors=F, header=T)
df1$method <- "FA"
df2 <- read.csv("../compress_error/ErrorFICA.csv",stringsAsFactors=F, header=T)
df2$method <- "FICA"
df3 <- read.csv("../compress_error/ErrorKernelLinear.csv",stringsAsFactors=F, header=T)
df3$method <- "K.Linear"
df4 <- read.csv("../compress_error/ErrorKernelRBF.csv",stringsAsFactors=F, header=T)
df4$method <- "K. RBF"
df5 <- read.csv("../compress_error/ErrorPPCA.csv",stringsAsFactors=F, header=T)
df5$method <- "P. PCA"
df6 <- read.csv("../compress_error/ErrorRPCA.csv",stringsAsFactors=F, header=T)
df6$method <- "R. PCA"
df7 <- read.csv("../compress_error/ErrorTSVD.csv",stringsAsFactors=F, header=T)
df7$method <- "T. SVD"
df <- rbind(df1,df2,df3,df4,df5,df6,df7)
colnames(df)<- c("dataset","2Features","3Features","4Features","5Features","6Features" ,"7Features","method")
write.table(df,file="../Errors_Compare.csv",sep=",",row.names=FALSE,col.names=TRUE)
dat <- melt(df, id.var=c("dataset","method"))
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value)) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("% Error caused by dimention reduction methods ") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
dev.off()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value)) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("% Error caused by dimention reduction methods ") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
dev.off()
getwd()
head(dat)
head(df)
df1 <- read.csv("../compress_error/ErrorFA.csv",stringsAsFactors=F, header=T)
df1$method <- "FA"
df2 <- read.csv("../compress_error/ErrorFICA.csv",stringsAsFactors=F, header=T)
df2$method <- "FICA"
df3 <- read.csv("../compress_error/ErrorKernelLinear.csv",stringsAsFactors=F, header=T)
df3$method <- "K.Linear"
df4 <- read.csv("../compress_error/ErrorKernelRBF.csv",stringsAsFactors=F, header=T)
df4$method <- "K. RBF"
df5 <- read.csv("../compress_error/ErrorPPCA.csv",stringsAsFactors=F, header=T)
df5$method <- "P. PCA"
df6 <- read.csv("../compress_error/ErrorRPCA.csv",stringsAsFactors=F, header=T)
df6$method <- "R. PCA"
df7 <- read.csv("../compress_error/ErrorTSVD.csv",stringsAsFactors=F, header=T)
df7$method <- "T. SVD"
df <- rbind(df1,df2,df3,df4,df5,df6,df7)
colnames(df)<- c("dataset","2Features","3Features","4Features","5Features","6Features" ,"7Features","method")
write.table(df,file="../Errors_Compare.csv",sep=",",row.names=FALSE,col.names=TRUE)
dat <- melt(df, id.var=c("dataset","method"))
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value)) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank(),axis.ticks = element_blank()) + xlab("Datasets") +ylab("% Error caused by dimention reduction methods ") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
dev.off()
quit()
