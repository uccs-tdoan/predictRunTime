ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
library(Hmisc)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +  theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +  theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
fit2$coefficients[3]
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
fit2$coefficients
data(mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
compare <- anova(fit1, fit2)
compare$Pr
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the hat diagonal for the most influential point
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the slope dfbeta for the point with the highest hat value.
fit <- lm(y ~ x)
dfbetas(fit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
library(rattle)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
library(caret)
library(pgmm)
data(olive)
olive = olive[,-1]
library(randomForest)
install.packages("pgmm")
library(caret)
library(pgmm)
data(olive)
olive = olive[,-1]
library(randomForest)
model <- train(Area ~ ., data = olive, method = "rpart2")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(rattle)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
## Loading required package: lattice
## Loading required package: ggplot2
library(rpart)
library(ggplot2)
library(rattle)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,data = training, method = "rpart")
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
inTrain
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
Library(caret)
library(caret)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
library(randomForest)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
imps
library(randomForest)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
summary(fit) # as.factor(cyl)8  -6.0709
summary(fit)
fit3 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
summary(fit3)
result <- anova(fit, fit3, test="Chi")
result$Pr
summary(fit)
fit3 <- lm(mpg ~ as.factor(cyl)*wt, data=mtcars)
summary(fit3)
result <- anova(fit, fit3, test="Chi")
result$Pr # 0.1037502
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
lm.influence(fit5)$hat[5] # 0.9945734
hatvalues(fit5)
dfbetas(fit5)[5, 2] # -133.8226
library(dplyr)
install.packages("hflights")
glimpse(hflights)
library(hflights)
glimpse(hflights)
setwd("C:/smallProject/predictRunTime/code")
---
title: "compress_error"
author: "tri doan"
date: "Tuesday, April 07, 2015"
output: graph of error comparision
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
library(reshape2)
library(ggplot2)
```
Load data and melt
```{r, echo=FALSE}
setwd("c:/predictRuntime/compress_error")
df1 <- read.csv("../compress_error/ErrorFA.csv",stringsAsFactors=F, header=T)
df1$method <- "FA"
df2 <- read.csv("../compress_error/ErrorFICA.csv",stringsAsFactors=F, header=T)
df2$method <- "FICA"
df3 <- read.csv("../compress_error/ErrorKernelLinear.csv",stringsAsFactors=F, header=T)
df3$method <- "K.Linear"
df4 <- read.csv("../compress_error/ErrorKernelRBF.csv",stringsAsFactors=F, header=T)
df4$method <- "K. RBF"
df5 <- read.csv("../compress_error/ErrorPPCA.csv",stringsAsFactors=F, header=T)
df5$method <- "P. PCA"
df6 <- read.csv("../compress_error/ErrorRPCA.csv",stringsAsFactors=F, header=T)
df6$method <- "R. PCA"
df7 <- read.csv("../compress_error/ErrorTSVD.csv",stringsAsFactors=F, header=T)
df7$method <- "T. SVD"
df <- rbind(df1,df2,df3,df4,df5,df6,df7)
colnames(df)<- c("dataset","2 Features","3 Features","4 Features","5 Features","6 Features" ,"7 Features","method")
write.table(df,file="../Errors_Compare.csv",sep=",",row.names=FALSE,col.names=TRUE)
dat <- melt(df, id.var=c("dataset","method"))
```
plot error vs number of features
```{r, echo=FALSE}
getwd()
setwd("C:/smallProject/predictRunTime/code")
---
title: "modelsCompare.Rmd"
author: "tri doan"
date: "Tuesday, April 07, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
library(ggplot2)
library(reshape2)
```
Load data
```{r, echo=FALSE}
setwd("c:/smallProject/predictRuntime/code")
df <- read.csv("../predictedTimeModels.csv")
dat <- melt(df,id.var="observed")
dat
levels(dat$variable)[levels(dat$variable)=="predPCR"] <- "Principle Component Regression"
levels(dat$variable)[levels(dat$variable)=="predPLS"] <- "Partial Least Square (PLS)"
levels(dat$variable)[levels(dat$variable)=="Elastic"] <- "Elastic Net"
levels(dat$variable)[levels(dat$variable)=="predRidge"] <- "Ridge Regression"
levels(dat$variable)[levels(dat$variable)=="predMars"] <- "Multi Variate Regression Spline (MARS)"
levels(dat$variable)[levels(dat$variable)=="predSVMR"] <- "Support Vector Regression"
levels(dat$variable)[levels(dat$variable)=="predKNN"] <- "K-Nearest Neighbor Regression"
```
generate plots
```{r, echo = FALSE}
pdf("../ModelsCompare.pdf", width=6, height=5)
ggplot(data = dat,aes(x = observed, y = value)) +
geom_point(colour = "blue") + geom_smooth(se = FALSE,colour="red") +
#  geom_abline(colour = "red") +
labs(x="Observed ") +
facet_wrap(~ variable,ncol = 2) + labs(y="Predicted ") +
coord_cartesian(xlim = c(0,70),ylim = c(0,70)) +
ggtitle("Predicted vs. Actual values by models") +
theme(plot.title = element_text(face="bold"))
dev.off()
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
library(reshape2)
library(ggplot2)
setwd("c:/predictRuntime/compress_error")
df1 <- read.csv("../compress_error/ErrorFA.csv",stringsAsFactors=F, header=T)
df1$method <- "FA"
df2 <- read.csv("../compress_error/ErrorFICA.csv",stringsAsFactors=F, header=T)
df2$method <- "FICA"
df3 <- read.csv("../compress_error/ErrorKernelLinear.csv",stringsAsFactors=F, header=T)
df3$method <- "K.Linear"
df4 <- read.csv("../compress_error/ErrorKernelRBF.csv",stringsAsFactors=F, header=T)
df4$method <- "K. RBF"
df5 <- read.csv("../compress_error/ErrorPPCA.csv",stringsAsFactors=F, header=T)
df5$method <- "P. PCA"
df6 <- read.csv("../compress_error/ErrorRPCA.csv",stringsAsFactors=F, header=T)
df6$method <- "R. PCA"
df7 <- read.csv("../compress_error/ErrorTSVD.csv",stringsAsFactors=F, header=T)
df7$method <- "T. SVD"
df <- rbind(df1,df2,df3,df4,df5,df6,df7)
colnames(df)<- c("dataset","2 Features","3 Features","4 Features","5 Features","6 Features" ,"7 Features","method")
write.table(df,file="../Errors_Compare.csv",sep=",",row.names=FALSE,col.names=TRUE)
dat <- melt(df, id.var=c("dataset","method"))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.text.y = element_blank())
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.text.x = element_blank())
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + geom_point(aes(shape = factor(variable)))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + geom_point(aes(shape = variable))
rm(list = ls())     # clear objects
graphics.off()      # close graphics windows
library(ggplot2)
library(gridExtra)
#create dummy data
test= data.frame(
group = c("Group 1", "Group 1", "Group 1","Group 2", "Group 2", "Group 2"),
x = c(1 ,2,3,1,2,3 ),
y = c(33,25,27,36,23,25),
n=c(71,55,65,58,65,58),
ypos=c(18,18,18,17,17,17)
)
p1 <- qplot(x=x, y=y, data=test, colour=group) +
ylab("Mean change from baseline") +
theme(plot.margin = unit(c(1,3,8,1), "lines")) +
geom_line()+
scale_x_continuous("Visits", breaks=seq(-1,3) ) +
theme(legend.position="bottom",
legend.title=element_blank())+
ggtitle("Line plot")
# Create the textGrobs
for (ii in 1:nrow(test))
{
#display numbers at each visit
p1=p1+ annotation_custom(grob = textGrob(test$n[ii]),
xmin = test$x[ii],
xmax = test$x[ii],
ymin = test$ypos[ii],
ymax = test$ypos[ii])
#display group text
if (ii %in% c(1,4)) #there is probably a better way
{
p1=p1+ annotation_custom(grob = textGrob(test$group[ii]),
xmin = 0.85,
xmax = 0.85,
ymin = test$ypos[ii],
ymax = test$ypos[ii])
}
}
# Code to override clipping
gt <- ggplot_gtable(ggplot_build(p1))
gt$layout$clip[gt$layout$name=="panel"] <- "off"
grid.draw(gt)
qplot(x=x, y=y, data=test, colour=group) +
ylab("Mean change from baseline") +
theme(plot.margin = unit(c(1,3,8,1), "lines")) +
geom_line()+
scale_x_continuous("Visits", breaks=seq(-1,3) ) +
theme(legend.position="bottom",
legend.title=element_blank())+
ggtitle("Line plot")
library(gridExtra)
library(grid)
p <- ggplot(data = msleep, aes(x = log(bodywt), y = sleep_total)) +
geom_point(aes(color = vore)) +
theme(legend.position="bottom", plot.margin = unit(c(1,1,3,1),"lines")) +
annotation_custom(grob = textGrob("Extra text.  Read all about it"),
xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name=="panel"] <- "off"
grid.draw(gt)
library(gridExtra)
library(grid)
p <- ggplot(data = msleep, aes(x = log(bodywt), y = sleep_total)) +
geom_point(aes(color = vore)) +
theme(legend.position="bottom", plot.margin = unit(c(1,1,3,1),"lines")) +
annotation_custom(grob = textGrob("Extra text.  Read all about it"),
xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name=="panel"] <- "off"
grid.draw(gt)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + annotation_custom(grob = textGrob("Extra text.  Read all about it"),
+                       xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + annotation_custom(grob = textGrob("Extra text.  Read all about it"), xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
df <- read.csv("../Errors_Compare.csv")
dat <- melt(df, id.var=c("dataset","method"))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(color=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + annotation_custom(grob = textGrob("Extra text.  Read all about it"), xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(shape=variable)+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
str(dat)
setwd("c:/predictRuntime/compress_error")
df1 <- read.csv("../compress_error/ErrorFA.csv",stringsAsFactors=F, header=T)
df1$method <- "FA"
df2 <- read.csv("../compress_error/ErrorFICA.csv",stringsAsFactors=F, header=T)
df2$method <- "FICA"
df3 <- read.csv("../compress_error/ErrorKernelLinear.csv",stringsAsFactors=F, header=T)
df3$method <- "K.Linear"
df4 <- read.csv("../compress_error/ErrorKernelRBF.csv",stringsAsFactors=F, header=T)
df4$method <- "K. RBF"
df5 <- read.csv("../compress_error/ErrorPPCA.csv",stringsAsFactors=F, header=T)
df5$method <- "P. PCA"
df6 <- read.csv("../compress_error/ErrorRPCA.csv",stringsAsFactors=F, header=T)
df6$method <- "R. PCA"
df7 <- read.csv("../compress_error/ErrorTSVD.csv",stringsAsFactors=F, header=T)
df7$method <- "T. SVD"
df <- rbind(df1,df2,df3,df4,df5,df6,df7)
colnames(df)<- c("dataset","2 Features","3 Features","4 Features","5 Features","6 Features" ,"7 Features","method")
write.table(df,file="../Errors_Compare.csv",sep=",",row.names=FALSE,col.names=TRUE)
dat <- melt(df, id.var=c("dataset","method"))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable)+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + annotation_custom(grob = textGrob("Extra text.  Read all about it"), xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + annotation_custom(grob = textGrob("Extra text.  Read all about it"), xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
p <- ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + annotation_custom(grob = textGrob("Extra text.  Read all about it"), xmin = 2, xmax = 2, ymin = -4.5, ymax = -4.55)
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name=="panel"] <- "off"
grid.draw(gt)
library(gridExtra)
library(grid)
p <- ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + annotation_custom(grob = textGrob("Extra text.  Read all about it"), xmin = 2, xmax = 2, ymin = -8)
gt <- ggplot_gtable(ggplot_build(p))
gt$layout$clip[gt$layout$name=="panel"] <- "off"
grid.draw(gt)
p <- ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Largest x-value is", max(df$x), sep = " ")),
x = unit(.2, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"),
gp = gpar(fontface = "bold", fontsize = 18, col = "blue"))
p
grid.text((paste("Largest x-value is")),
x = unit(.2, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"),
gp = gpar(fontface = "bold", fontsize = 18, col = "blue"))
grid.text((paste("Largest x-value is")),
x = unit(.1, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"),
gp = gpar( fontsize = 11, col = "blue"))
grid.text((paste("Largest x-value is")),
x = unit(.2, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"),
gp = gpar(fontface = "bold", fontsize = 18, col = "blue"))
p
grid.text((paste("Largest x-value is")),
x = unit(.1, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"),
gp = gpar( fontsize = 11, col = "blue"))
p
p <- ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
p
grid.text((paste("Largest x-value is)),x = unit(.2, "npc"), y = unit(.2, "npc"), just = c("left", "bottom"),
grid.text((paste("Largest x-value is")),x = unit(.2, "npc"), y = unit(.2, "npc"), just = c("left", "bottom"),
grid.text((paste("Largest x-value is")),x = unit(.2, "npc"), y = unit(.2, "npc"), just = c("left", "bottom"),
)
)
grid.text((paste("Largest x-value is")), x = unit(.2, "npc"), y = unit(.2, "npc"), just = c("left", "bottom"),
gp = gpar( fontsize = 11, ))
grid.text((paste("Largest x-value is")), x = unit(.2, "npc"), y = unit(.2, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
grid.text((paste("Largest x-value is")), x = unit(.1, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
grid.text((paste("Largest x-value is")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank()) + grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
getwd()
pdf("../errorCompression.pdf", width=6, height=5)
p<- ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
print(p)
dev.off()
getwd()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.1, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each fixed features of transformed data w.r.t. to dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each above transformed data generated by dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each above transformed data generated by dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each above transformed data generated by dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Above transformed data generated by dimensionality reduction techniques on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Above transformed data created by dimensionality reduction methods on r.h.s ")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each transformed data created by dimensionality reduction methods on right hand side")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
pdf("../errorCompression.pdf", width=6, height=5)
ggplot(dat,aes(variable,value),color=dataset,na.rm=TRUE) + geom_point(aes(shape=variable))+ facet_grid(method~dataset) + theme( axis.text.x = element_blank(), legend.position = "bottom",legend.title=element_blank()) + xlab("Datasets") +ylab("Error rates in different dimension reduction methods") + scale_y_continuous(breaks=c(0.2,0.5,0.8)) + theme(axis.ticks=element_blank())
grid.text((paste("Each transformed data created by dimensionality reduction methods on the right")), x = unit(.05, "npc"), y = unit(.05, "npc"), just = c("left", "bottom"), gp = gpar(fontsize = 11))
dev.off()
